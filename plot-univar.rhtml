## comment RApache errors
RApacheOutputErrors(TRUE, "<!--", "-->")

## a lengthy plot function
univar_plot <- function(){

  ## load packages
  require(stats)
  require(graphics)
  ## require(rjson)                        # at some point this will be required

  ## SERVER-SIDE FORM VALIDATION ##

  ## sample-size limit: 100000 - just like that!
  ## check for negative sample size (n)
  ## check for # of args!
  
  ## check for missing arguments
  if (any(sapply(POST, is.null)))
    stop("Submitted empty fields!")

  ## avoid logical values conversion
  if (any(c("TRUE", "FALSE", "T", "F") %in% POST))
    stop("Logical values not allowed")

  ## check sample size: positive integer not larger than 1e5 (just like that)
  ## check for decimals!!! floor/round, coerce to integer!

  ## check sample size
  tmp_n <- as.numeric(POST$n)
  if (tmp_n <= 0 || tmp_n > 1e5)
    stop("Sample size error!")

  ## distribution names
  dists <- c("beta", "binom", "cauchy", "chisq", "exp", "f", "gamma", "geom", "hyper", "logis", "lnorm", "nbinom", "norm", "pois", "t", "unif_d", "unif_c", "weibull", "wilcox")
  ## check for available distributions
  if (!(POST$distname %in% dists))
    stop("Unknown distribution!")
  
  ## discrete distributions
  discrete <- c("binom", "geom", "hyper", "nbinom", "pois", "unif_d", "wilcox")
  ## continuous distributions
  continuous <- setdiff(dists, discrete)
  
  ## check disttype params
  if (!(POST$disttype %in% c("r", "d", "p")))
    stop("Unknown distribution type!")
  
  ## check plottype params - this will change soon!
  plots <- c("p", "l", "o", "b", "h", "s", "boxplot", "histogram", "density", "ecdf")
    if (!(POST$plottype %in% plots))
    stop("Unknown plot type!")

    ## convert POST args to appropriate format
  tmp <- which(names(POST) %in% c("distname", "disttype", "plottype")) # get non-numeric params
  POST[-tmp] <- lapply(POST[-tmp], as.numeric) # convert dist params to numeric
  ## check for failed conversions
  if (any(sapply(POST, is.na)))
    stop("Submitted non-numeric arguments!")

  ## set file path - DO NOT UNLIST - malicious!!! someone can pass more inputs
  ## this is gonna be lengthy one, don't repeat switch!!! write a function!
  plot_name <- paste(paste(unlist(POST), collapse = "_"), ".png", sep = "") # set filename
  plot_dir <- "/srv/http/univar/img"   # file wd
  ## plot_dir <- "/srv/http/univar/img"   # file wd
  
  ## plot or not
  if (!plot_name %in% dir(plot_dir)) {
    
    ## if random
    with(POST,
         if (disttype == "r") {
         set.seed(seed)                   # hmm...
         x <<- switch(distname,
                      beta = rbeta(n, shape1, shape2),
                      binom = rbinom(n, size, prob),
                      cauchy = rcauchy(n, location, scale),
                      chisq = rchisq(n, df),
                      exp = rexp(n, rate),
                      f = rf(n, df1, df2),
                      gamma = rgamma(n, shape, scale = scale),
                      geom = rgeom(n, prob),
                      hyper = rhyper(n, white, black, k),
                      logis = rlogis(n, location, scale),
                      lnorm = rlnorm(n, meanlog, sdlog),
                      nbinom = rnbinom(n, size, prob),
                      norm = rnorm(n, mean, sqrt(var)),
                      pois = rpois(n, lambda),
                      t = rt(n, df),
                      unif_d = round(runif(n, min, max)),
                      unif_c = runif(n, min, max),
                      weibull = rweibull(n, shape, scale),
                      wilcox = rwilcox(n, n1, n2),
                      stop("Unspecified distribution!")
                      )
         ## if PDF (probability distribution function), d* in R
       } else if (disttype == "d") {
         if (distname %in% discrete) {
           x <<- 0:n
         } else {
           x <<- seq(from, to, length.out = n)
         }
         y <<- switch(distname,
                      beta = dbeta(x, shape1, shape2),
                      binom = dbinom(x, size, prob),
                      cauchy = dcauchy(x, location, scale),
                      chisq = dchisq(x, df),
                      exp = dexp(x, rate),
                      f = df(x, df1, df2),
                      gamma = dgamma(x, shape, scale = scale),
                      geom = dgeom(x, prob),
                      hyper = dhyper(x, white, black, k),
                      logis = dlogis(x, location, scale),
                      lnorm = dlnorm(x, meanlog, sdlog),
                      nbinom = dnbinom(x, size, prob),
                      norm = dnorm(x, mean, sqrt(var)),
                      pois = dpois(x, lambda),
                      t = dt(x, df),
                      unif_d = round(dunif(x, min, max)),
                      unif_c = dunif(x, min, max),
                      weibull = dweibull(x, shape, scale),
                      wilcox = dwilcox(x, n1, n2),
                      stop("Unspecified distribution!")
                      )
         ## if CDF (cumulative distribution function), p* in R
       } else if (disttype == "p") {
         if (distname %in% discrete) {
           x <<- 0:n
         } else {
           x <<- seq(from, to, length.out = n)
         }
         y <<- switch(distname,
                      beta = pbeta(x, shape1, shape2),
                      binom = pbinom(x, size, prob),
                      cauchy = pcauchy(x, location, scale),
                      chisq = pchisq(x, df),
                      exp = pexp(x, rate),
                      f = pf(x, df1, df2),
                      gamma = pgamma(x, shape, scale = scale),
                      geom = pgeom(x, prob),
                      hyper = phyper(x, white, black, k),
                      logis = plogis(x, location, scale),
                      lnorm = plnorm(x, meanlog, sdlog),
                      nbinom = pnbinom(x, size, prob),
                      norm = pnorm(x, mean, sqrt(var)),
                      pois = ppois(x, lambda),
                      t = pt(x, df),
                      unif_d = round(punif(x, min, max)),
                      unif_c = punif(x, min, max),
                      weibull = pweibull(x, shape, scale),
                      wilcox = pwilcox(x, n1, n2),
                      stop("Unspecified distribution!")
                      )
       } else {
         stop("disttype gen error")
       })                            # end with post
    
    plot_path <- file.path(plot_dir, plot_name) # file path
    ## plot data
    png(plot_path)
    ## if random
    with(POST,
         if (disttype == "r") {
           switch(plottype,
                  p = plot(x, main = "", pch = 19, type = "p"),
                  l = plot(x, main = "", type = "l"),
                  o = plot(x, main = "", pch = 19, type = "o"),
                  b = plot(x, main = "", pch = 19, type = "b"),
                  h = plot(x, main = "", type = "h"),
                  s = plot(x, main = "", type = "s"),
                  histogram = hist(x, main = ""),
                  boxplot = boxplot(x, main = "", horizontal = TRUE, pch = 19),
                  density = plot(density(x), main = ""),
                  ecdf = plot(ecdf(x), main = ""),
                  stop("Unknown random variate plot type") # you never know...
                  )
           ## if PDF or CDF
         } else if (disttype == "d" || disttype == "p") {
           switch(plottype,
                  p = plot(x, y, ylab = "", main = "", pch = 19, type = "p"),
                  l = plot(x, y, ylab = "", main = "", type = "l"),
                  o = plot(x, y, ylab = "", main = "", pch = 19, type = "o"),
                  b = plot(x, y, ylab = "", main = "", pch = 19, type = "b"),
                  h = plot(x, y, ylab = "", main = "", type = "h"),
                  s = plot(x, y, ylab = "", main = "", type = "s"),
                  stop("Unknown PDF/CDF plot type!") # just in case...
                  )
         } else {
           stop("Plot error!");
         } # end if
         ) # end with
    
    dev.off()
    
  } # end plotting
  
  cat('<img src = "img/', plot_name, '" alt = "rplot" />', sep = "")
  
} # end univar plot

err <- function(e) cat('<p id = "plot-text" class = "rfault">', e$message, '</p>')

# set function execution time limit
setTimeLimit(elapsed = 10)
## do the magic
tryCatch(univar_plot(), error = err)
## reset time limit
setTimeLimit()
