## comment RApache errors
RApacheOutputErrors(TRUE, "<!--\n", "-->\n") # development purposes only
## RApacheOutputErrors(FALSE)


## FORM VALIDATION

nms <- names(POST)                    # form input names
nargs <- length(POST)                 # number of fields
txt_inputs <- c("distname", "disttype", "plottype") # textual inputs
num_inputs <- setdiff(nms, txt_inputs)              # numerical inputs

re_num <- "^-?[0-9]+(\\.[0-9]+)?$" # numeric regexp
re_inf <- "^-?([0-9]+(\\.[0-9]+)?|Inf)$" # numeric with Inf regexp
re_int <- "^-?[0-9]+$"                   # integer regexp

## distribution names
dists <- c("beta", "binom", "cauchy", "chisq", "exp", "f", "gamma", "geom", "hyper", "logis", "lnorm", "nbinom", "norm", "pois", "t", "unif_d", "unif_c", "weibull")

## discrete distributions
dist_d <- c("binom", "geom", "hyper", "nbinom", "pois", "unif_d")
## continuous distributions
dist_c <- setdiff(dists, discrete)

## plot types
plots <- c("p", "l", "o", "b", "h", "s", "boxplot", "histogram", "density", "ecdf")

## error status & message
err_status <- FALSE
err_list<- list()

## check distribution names
if (!POST$distname %in% dists) {
  err_status <- TRUE
  err_list$main <- c(err_list$main, paste("Unknown distribution:", POST$distname))
}

## check distribution types
if (!POST$disttype %in% c("r", "d", "p")) {
  err_status <- TRUE
  err_list$main <- c(err_list$main, "Unknown distribution type")
}

## check plot type
if (!POST$plottype %in% plots) {
  err_status <- TRUE
  err_list$main <- c(err_list$main, "Unknown plot type")
}

## distribution parameters
distpars <- list(
                 beta = c("shape1", "shape2"),
                 binom = c("size", "prob"),
                 cauchy = c("location", "scale"),
                 chisq = "dfchisq",
                 exp = "rate",
                 f = c("df1", "df2"),
                 gamma = c("shape", "scale"),
                 geom = "p",
                 hyper = c("m", "total", "k"),
                 logis = c("location", "scale"),
                 lnorm = c("meanlog", "sdlog"),
                 nbinom = c("x", "p"),
                 norm = c("mean", "var"),
                 pois = "lambda",
                 t = "df",
                 unif_d = c("a_disc", "b_disc"),
                 unif_c = c("a_cont", "b_cont"),
                 weibull = c("shape", "scale")
                 )

## unique parameters
unqpars <- unique(unlist(distpars))     # wtf is this for???

## check distribution specific inputs
check_inputs <- function(params) {
  if (POST$disttype == "r") {           # (pseudo)random distribution
    args <- c("n", "seed", params, txt_inputs)
  } else if (POST$disttype %in% c("d", "p")) { # density/cumulative
    args <- c("from", "to", "n", params, txt_inputs)
  }
  if (!setequal(nms, args)) {
    err_status <<- TRUE
    err_list$main <<- c(err_list$main, paste("Invalid form inputs:", setdiff(nms, args)))
  }
}

## perform the argument check
check_inputs(POST$distname)

## check empty arguments
check_empty <- sapply(POST, is.null)
if (any(fld_empty_check)) {
  err_status <- TRUE
  err_list$main <- c(err_list$main, paste("Submitted empty fields: ", fld_empty_check[check_empty])) # use field labels
}

## convert to numeric
POST[num_inputs] <- lapply(POST[num_inputs], num_check)

## check sample size
if (n <= 0 | n > 1e5) {
  err_status <- TRUE
  err_list$dist_params<- c(err_list$dist_params, "Sample size error")
}

## check seed #
if (!grepl(re_num, POST$seed)) {
  err_status <- TRUE
  err_list$dist_params<- c(err_list$dist_params, paste("Invalid seed number: ", POST$seed))
}

## from-to check!
## from > to
## distribution-specific


## real number check
## matches location, mean, meanlog, a_cont, b_cont
r_num <- "^(location|mean(log)?|[ab]{1}_cont)$"

## check if these inputs are real
## real numbers are already checked (convert to numeric)
if (!is.numeric(POST[grep(r_num, POST$distname, value = TRUE)])) {
  ## WTF???
}

## real positive
r_pos <- "^(shape[12]?|scale|sdlog|df|rate|x|var|lambda)$"
## check for positive reals







  

  ## load packages: stats, graphs, RJSONIO - REvalOnStartup
  
  ## set file path - DO NOT UNLIST - malicious!!! someone can pass more inputs
  ## this is gonna be lengthy one, don't repeat switch!!! write a function!
  plot_name <- paste(paste(unlist(POST), collapse = "_"), ".png", sep = "") # set filename
  plot_dir <- "/srv/http/univar/img"   # file wd
  
  ## plot or not
  if (!plot_name %in% dir(plot_dir)) {
    
    ## if random
    with(POST,
         if (disttype == "r") {
         set.seed(seed)
         x <<- switch(distname,
                      beta = rbeta(n, shape1, shape2),
                      binom = rbinom(n, size, prob),
                      cauchy = rcauchy(n, location, scale),
                      chisq = rchisq(n, df),
                      exp = rexp(n, rate),
                      f = rf(n, df1, df2),
                      gamma = rgamma(n, shape, scale = scale),
                      geom = rgeom(n, prob),
                      hyper = rhyper(n, white, black, k),
                      logis = rlogis(n, location, scale),
                      lnorm = rlnorm(n, meanlog, sdlog),
                      nbinom = rnbinom(n, size, prob),
                      norm = rnorm(n, mean, sqrt(var)),
                      pois = rpois(n, lambda),
                      t = rt(n, df),
                      unif_d = round(runif(n, min, max)),
                      unif_c = runif(n, min, max),
                      weibull = rweibull(n, shape, scale),
                      wilcox = rwilcox(n, n1, n2),
                      stop("Unspecified distribution!")
                      )
         ## if PDF (probability distribution function), d* in R
       } else if (disttype == "d") {
         if (distname %in% discrete) {
           x <<- 0:n
         } else {
           x <<- seq(from, to, length.out = n)
         }
         y <<- switch(distname,
                      beta = dbeta(x, shape1, shape2),
                      binom = dbinom(x, size, prob),
                      cauchy = dcauchy(x, location, scale),
                      chisq = dchisq(x, df),
                      exp = dexp(x, rate),
                      f = df(x, df1, df2),
                      gamma = dgamma(x, shape, scale = scale),
                      geom = dgeom(x, prob),
                      hyper = dhyper(x, white, black, k),
                      logis = dlogis(x, location, scale),
                      lnorm = dlnorm(x, meanlog, sdlog),
                      nbinom = dnbinom(x, size, prob),
                      norm = dnorm(x, mean, sqrt(var)),
                      pois = dpois(x, lambda),
                      t = dt(x, df),
                      unif_d = round(dunif(x, min, max)),
                      unif_c = dunif(x, min, max),
                      weibull = dweibull(x, shape, scale),
                      wilcox = dwilcox(x, n1, n2),
                      stop("Unspecified distribution!")
                      )
         ## if CDF (cumulative distribution function), p* in R
       } else if (disttype == "p") {
         if (distname %in% discrete) {
           x <<- 0:n
         } else {
           x <<- seq(from, to, length.out = n)
         }
         y <<- switch(distname,
                      beta = pbeta(x, shape1, shape2),
                      binom = pbinom(x, size, prob),
                      cauchy = pcauchy(x, location, scale),
                      chisq = pchisq(x, df),
                      exp = pexp(x, rate),
                      f = pf(x, df1, df2),
                      gamma = pgamma(x, shape, scale = scale),
                      geom = pgeom(x, prob),
                      hyper = phyper(x, white, black, k),
                      logis = plogis(x, location, scale),
                      lnorm = plnorm(x, meanlog, sdlog),
                      nbinom = pnbinom(x, size, prob),
                      norm = pnorm(x, mean, sqrt(var)),
                      pois = ppois(x, lambda),
                      t = pt(x, df),
                      unif_d = round(punif(x, min, max)),
                      unif_c = punif(x, min, max),
                      weibull = pweibull(x, shape, scale),
                      wilcox = pwilcox(x, n1, n2),
                      stop("Unspecified distribution!")
                      )
       } else {
         stop("disttype gen error")
       })                            # end with post
    
    plot_path <- file.path(plot_dir, plot_name) # file path
    ## plot data
    png(plot_path)
    ## if random
    with(POST,
         if (disttype == "r") {
           switch(plottype,
                  p = plot(x, main = "", pch = 19, type = "p"),
                  l = plot(x, main = "", type = "l"),
                  o = plot(x, main = "", pch = 19, type = "o"),
                  b = plot(x, main = "", pch = 19, type = "b"),
                  h = plot(x, main = "", type = "h"),
                  s = plot(x, main = "", type = "s"),
                  histogram = hist(x, main = ""),
                  boxplot = boxplot(x, main = "", horizontal = TRUE, pch = 19),
                  density = plot(density(x), main = ""),
                  ecdf = plot(ecdf(x), main = ""),
                  stop("Unknown random variate plot type") # you never know...
                  )
           ## if PDF or CDF
         } else if (disttype == "d" || disttype == "p") {
           switch(plottype,
                  p = plot(x, y, ylab = "", main = "", pch = 19, type = "p"),
                  l = plot(x, y, ylab = "", main = "", type = "l"),
                  o = plot(x, y, ylab = "", main = "", pch = 19, type = "o"),
                  b = plot(x, y, ylab = "", main = "", pch = 19, type = "b"),
                  h = plot(x, y, ylab = "", main = "", type = "h"),
                  s = plot(x, y, ylab = "", main = "", type = "s"),
                  stop("Unknown PDF/CDF plot type!") # just in case...
                  )
         } else {
           stop("Plot error!");
         } # end if
         ) # end with
    
    dev.off()
    
  } # end plotting
  
  cat('<img src = "img/', plot_name, '" alt = "rplot" />', sep = "")
  ## toJSON(list(plot = plot_name, err_msg = NULL))
  
} # end univar plot

err <- function(e) cat('<p id = "plot-text" class = "rfault">', e$message, '</p>')

## err function will put e$message in json, result as null, serialize to json, unserialize in JS

# set function execution time limit
setTimeLimit(elapsed = 10)
## do the magic
tryCatch(univar_plot(), error = err)
## reset time limit
setTimeLimit()


## beautify plots
## - mathematical notation on x & y axis
