## comment RApache errors
RApacheOutputErrors(TRUE, "<!--\n", "-->\n") # development purposes only
## RApacheOutputErrors(FALSE)



## should I put this in validate_form
nms <- names(POST)                    # form input names
nargs <- length(POST)                 # number of fields
txt_inputs <- c("distname", "disttype", "plottype") # textual inputs
num_inputs <- setdiff(nms, txt_inputs)              # numerical inputs
## regexp types
re_int <- "^-?[0-9]+$"  # integer regular expression
re_posint <- "^[0-9]+$" # positive integer regular expression
re_num <- "^(-|\\+)?[0-9]+(\\.[0-9]+)?$" # numeric regexp

## distribution names
dists <- c("beta", "binom", "cauchy", "chisq", "exp", "f", "gamma", "geom", "hyper", "logis", "lnorm", "nbinom", "norm", "pois", "t", "unif_d", "unif_c", "weibull")

## discrete distributions
dist_d <- c("binom", "geom", "hyper", "nbinom", "pois", "unif_d")
## continuous distributions
dist_c <- setdiff(dists, discrete)


## FORM VALIDATION
validate_form <- function(POST) {

  ## check for missing args
  if (any(sapply(POST, is.null)))
    stop("Submitted empty fields")
  
  ## check distribution names
  if (!POST$distname %in% dists)
    stop("Unknown distribution")

  ## check distribution types
  if (!POST$disttype %in% c("r", "d", "p"))
    stop("Unknown distribution type")

  ## check numeric
  num_check <- function(x, ...) {
    if (grepl(re_num, x, ...))               # check numeric regexp
      x <- as.numeric(x)                # convert to numeric =)
    else
      stop("Invalid form fields")       # throw error
  }
  
  ## convert to numeric
  POST[num_inputs] <- lapply(POST[num_inputs], num_check)

  ## check plot type
  plots <- c("p", "l", "o", "b", "h", "s", "boxplot", "histogram", "density", "ecdf")
  if (!POST$plottype %in% plots)
    stop("Unknown plot type")

  
  ## check distribution parameters

  ## check sample size
  if (!"n" %in% nms) {
    stop("Sample size is missing")
  } else {
    tmp_n <- as.numeric(POST$n)
    ## positive integer not larger than 1e5
    if (tmp_n <= 0 || tmp_n > 1e5 || tmp_n != floor(tmp_n))
      stop("Sample size error!")
  }

  ## (pseudo)random parameters
  if (POST$disttype == "r") {
    if (!("seed" %in% nms)) {
      stop("Seed not given!")
    } else {
      ## check number of args
      arg_3 <- c("chisq", "exp", "geom", "pois", "t")
      arg_4 <- setdiff(dists, c(arg_3, "hyper"))
      ## arg_5 <- "hyper"
      if (POST$distname %in% arg_3)
        stopifnot(nargs == 6)
      if (POST$distname %in% arg_4)
        stopifnot(nargs == 7)
      if (POST$distname == "hyper")
        stopifnot(nargs == 8)
      }
  }
  
  ## PMF/PDF & CDF
  if (POST$disttype %in% c("d", "p")) {
    ## check from & to
    if (!all(c("from", "to")) %in% nms) {
      stop("x-axis limit(s) are missing") # throw error
    } else {
      ## check number of args
      arg_2 <- c("geom", "pois")
      arg_3 <- c("beta", "binom", "nbinom", "unif_d")
      arg_4 <- c("chisq", "exp", "hyper", "t")
      arg_5 <- setdiff(dists, c(arg_2, arg_3, arg_4))
      if (POST$distname %in% arg_2)
        stopifnot(nargs == 5)
      if (POST$distname %in% arg_3)
        stopifnot(nargs == 6)
      if (POST$distname %in% arg_4)
        stopifnot(nargs == 7)
      if (POST$distname %in% arg_5)
        stopifnot(nargs == 8)
      ## check x-axis limits
      if (POST$from > POST$to) {
        stop("Xmin larger than Xmax")
      }
    }
  }

  ## check distribution parameters
  ## beta
  check_beta <- function() {
    with(POST,
         if (!all(c(a, b) > 0)) {
           stop("shape parameters must be real positive numbers")
         })
  }
  ## binomial
  check_binom <- function() {
    with(POST,
         if (!(is.integer(size) & size >= 0)) {
           stop("invalid number of trials")
         }
         if (0 <= p & p <= 1) {
           stop("invalid p")
         })
  }
  ## cauchy
  check_cauchy <- function() {
    with(POST,
         if (!scale > 0) {
           stop("Scale not positive real")
         })
  }
  ## chi-square
  check_chisq <- function() {
    with(POST,
         if (!df > 0) {
           stop("degrees of freedom not positive")
         })
  }
  ## exponential
  check_exp <- function() {
    with(POST,
         if (!all(c(df1, df2) > 0)
         
         
  
         



  
} ## end



## a lengthy plot function
univar_plot <- function(){

  ## load packages
  require(stats)
  require(graphics)
  require(RJSONIO)
  
  ## set file path - DO NOT UNLIST - malicious!!! someone can pass more inputs
  ## this is gonna be lengthy one, don't repeat switch!!! write a function!
  plot_name <- paste(paste(unlist(POST), collapse = "_"), ".png", sep = "") # set filename
  plot_dir <- "/srv/http/univar/img"   # file wd
  ## plot_dir <- "/srv/http/univar/img"   # file wd
  
  ## plot or not
  if (!plot_name %in% dir(plot_dir)) {
    
    ## if random
    with(POST,
         if (disttype == "r") {
         set.seed(seed)                   # hmm...
         x <<- switch(distname,
                      beta = rbeta(n, shape1, shape2),
                      binom = rbinom(n, size, prob),
                      cauchy = rcauchy(n, location, scale),
                      chisq = rchisq(n, df),
                      exp = rexp(n, rate),
                      f = rf(n, df1, df2),
                      gamma = rgamma(n, shape, scale = scale),
                      geom = rgeom(n, prob),
                      hyper = rhyper(n, white, black, k),
                      logis = rlogis(n, location, scale),
                      lnorm = rlnorm(n, meanlog, sdlog),
                      nbinom = rnbinom(n, size, prob),
                      norm = rnorm(n, mean, sqrt(var)),
                      pois = rpois(n, lambda),
                      t = rt(n, df),
                      unif_d = round(runif(n, min, max)),
                      unif_c = runif(n, min, max),
                      weibull = rweibull(n, shape, scale),
                      wilcox = rwilcox(n, n1, n2),
                      stop("Unspecified distribution!")
                      )
         ## if PDF (probability distribution function), d* in R
       } else if (disttype == "d") {
         if (distname %in% discrete) {
           x <<- 0:n
         } else {
           x <<- seq(from, to, length.out = n)
         }
         y <<- switch(distname,
                      beta = dbeta(x, shape1, shape2),
                      binom = dbinom(x, size, prob),
                      cauchy = dcauchy(x, location, scale),
                      chisq = dchisq(x, df),
                      exp = dexp(x, rate),
                      f = df(x, df1, df2),
                      gamma = dgamma(x, shape, scale = scale),
                      geom = dgeom(x, prob),
                      hyper = dhyper(x, white, black, k),
                      logis = dlogis(x, location, scale),
                      lnorm = dlnorm(x, meanlog, sdlog),
                      nbinom = dnbinom(x, size, prob),
                      norm = dnorm(x, mean, sqrt(var)),
                      pois = dpois(x, lambda),
                      t = dt(x, df),
                      unif_d = round(dunif(x, min, max)),
                      unif_c = dunif(x, min, max),
                      weibull = dweibull(x, shape, scale),
                      wilcox = dwilcox(x, n1, n2),
                      stop("Unspecified distribution!")
                      )
         ## if CDF (cumulative distribution function), p* in R
       } else if (disttype == "p") {
         if (distname %in% discrete) {
           x <<- 0:n
         } else {
           x <<- seq(from, to, length.out = n)
         }
         y <<- switch(distname,
                      beta = pbeta(x, shape1, shape2),
                      binom = pbinom(x, size, prob),
                      cauchy = pcauchy(x, location, scale),
                      chisq = pchisq(x, df),
                      exp = pexp(x, rate),
                      f = pf(x, df1, df2),
                      gamma = pgamma(x, shape, scale = scale),
                      geom = pgeom(x, prob),
                      hyper = phyper(x, white, black, k),
                      logis = plogis(x, location, scale),
                      lnorm = plnorm(x, meanlog, sdlog),
                      nbinom = pnbinom(x, size, prob),
                      norm = pnorm(x, mean, sqrt(var)),
                      pois = ppois(x, lambda),
                      t = pt(x, df),
                      unif_d = round(punif(x, min, max)),
                      unif_c = punif(x, min, max),
                      weibull = pweibull(x, shape, scale),
                      wilcox = pwilcox(x, n1, n2),
                      stop("Unspecified distribution!")
                      )
       } else {
         stop("disttype gen error")
       })                            # end with post
    
    plot_path <- file.path(plot_dir, plot_name) # file path
    ## plot data
    png(plot_path)
    ## if random
    with(POST,
         if (disttype == "r") {
           switch(plottype,
                  p = plot(x, main = "", pch = 19, type = "p"),
                  l = plot(x, main = "", type = "l"),
                  o = plot(x, main = "", pch = 19, type = "o"),
                  b = plot(x, main = "", pch = 19, type = "b"),
                  h = plot(x, main = "", type = "h"),
                  s = plot(x, main = "", type = "s"),
                  histogram = hist(x, main = ""),
                  boxplot = boxplot(x, main = "", horizontal = TRUE, pch = 19),
                  density = plot(density(x), main = ""),
                  ecdf = plot(ecdf(x), main = ""),
                  stop("Unknown random variate plot type") # you never know...
                  )
           ## if PDF or CDF
         } else if (disttype == "d" || disttype == "p") {
           switch(plottype,
                  p = plot(x, y, ylab = "", main = "", pch = 19, type = "p"),
                  l = plot(x, y, ylab = "", main = "", type = "l"),
                  o = plot(x, y, ylab = "", main = "", pch = 19, type = "o"),
                  b = plot(x, y, ylab = "", main = "", pch = 19, type = "b"),
                  h = plot(x, y, ylab = "", main = "", type = "h"),
                  s = plot(x, y, ylab = "", main = "", type = "s"),
                  stop("Unknown PDF/CDF plot type!") # just in case...
                  )
         } else {
           stop("Plot error!");
         } # end if
         ) # end with
    
    dev.off()
    
  } # end plotting
  
  cat('<img src = "img/', plot_name, '" alt = "rplot" />', sep = "")
  ## toJSON(list(plot = plot_name, err_msg = NULL))
  
} # end univar plot

err <- function(e) cat('<p id = "plot-text" class = "rfault">', e$message, '</p>')

## err function will put e$message in json, result as null, serialize to json, unserialize in JS

# set function execution time limit
setTimeLimit(elapsed = 10)
## do the magic
tryCatch(univar_plot(), error = err)
## reset time limit
setTimeLimit()


## write code in chunks - several functions, one that will call them all, if necessary!
## - one that will check for code insertion, use POST as fn argument
## - afterwards, everything is just a routine...
## beautify plots
## - mathematical notation on x & y axis
